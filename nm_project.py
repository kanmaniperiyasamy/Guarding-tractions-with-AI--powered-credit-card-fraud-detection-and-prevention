# -*- coding: utf-8 -*-
"""NM project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14oXs-5cV5a0o7Mc7b44uxXraJIXe0mLh
"""

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
from imblearn.over_sampling import SMOTE
import matplotlib.pyplot as plt
import seaborn as sns

# Optional: Suppress warnings
import warnings
warnings.filterwarnings('ignore')

# Load the dataset with error handling
try:
    data = pd.read_csv('creditcard.csv')
except FileNotFoundError:
    print("Error: 'creditcard.csv' not found in the current directory.")
    exit()

# Check for missing values
if data.isnull().values.any():
    print("Warning: Dataset contains missing values. Filling with median.")
    data.fillna(data.median(), inplace=True)

# Optional: Scale 'Amount' feature and drop 'Time' for better performance
from sklearn.preprocessing import StandardScaler
data['Amount'] = StandardScaler().fit_transform(data[['Amount']])
if 'Time' in data.columns:
    data.drop(['Time'], axis=1, inplace=True)

# Separate features and target
X = data.drop('Class', axis=1)
y = data['Class']

# Stratified train-test split to maintain class ratio
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# Handle class imbalance using SMOTE
sm = SMOTE(random_state=42)
X_res, y_res = sm.fit_resample(X_train, y_train)

# Initialize and train the Random Forest classifier
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_res, y_res)

# Make predictions
y_pred = rf.predict(X_test)

# Evaluate the model
print("Confusion Matrix:")
cm = confusion_matrix(y_test, y_pred)
print(cm)

print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Visualize the confusion matrix
plt.figure(figsize=(6,4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Not Fraud', 'Fraud'], yticklabels=['Not Fraud', 'Fraud'])
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.tight_layout()
plt.show()

# Optional: Suppress warnings
import warnings
warnings.filterwarnings('ignore')

# Load the dataset with error handling
try:
    data = pd.read_csv('creditcard.csv')
except FileNotFoundError:
    print("Error: 'creditcard.csv' not found in the current directory.")
    exit()

# Check for missing values
if data.isnull().values.any():
    print("Warning: Dataset contains missing values. Filling with median.")
    data.fillna(data.median(), inplace=True)

# Optional: Scale 'Amount' feature and drop 'Time' for better performance
from sklearn.preprocessing import StandardScaler
data['Amount'] = StandardScaler().fit_transform(data[['Amount']])
if 'Time' in data.columns:
    data.drop(['Time'], axis=1, inplace=True)

# Separate features and target
X = data.drop('Class', axis=1)
y = data['Class']

# Stratified train-test split to maintain class ratio
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# Handle class imbalance using SMOTE
sm = SMOTE(random_state=42)
X_res, y_res = sm.fit_resample(X_train, y_train)

# Initialize and train the Random Forest classifier
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_res, y_res)

# Make predictions
y_pred = rf.predict(X_test)

# Evaluate the model
print("Confusion Matrix:")
cm = confusion_matrix(y_test, y_pred)
print(cm)

print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Visualize the confusion matrix
plt.figure(figsize=(6,4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Not Fraud', 'Fraud'], yticklabels=['Not Fraud', 'Fraud'])
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.tight_layout()
plt.show()